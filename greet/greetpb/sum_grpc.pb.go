// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoSumServiceClient is the client API for DoSumService controller.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoSumServiceClient interface {
	Sum(ctx context.Context, in *DoSumRequest, opts ...grpc.CallOption) (*DoSumResponse, error)
}

type doSumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoSumServiceClient(cc grpc.ClientConnInterface) DoSumServiceClient {
	return &doSumServiceClient{cc}
}

func (c *doSumServiceClient) Sum(ctx context.Context, in *DoSumRequest, opts ...grpc.CallOption) (*DoSumResponse, error) {
	out := new(DoSumResponse)
	err := c.cc.Invoke(ctx, "/greet.doSumService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoSumServiceServer is the server API for DoSumService controller.
// All implementations must embed UnimplementedDoSumServiceServer
// for forward compatibility
type DoSumServiceServer interface {
	Sum(context.Context, *DoSumRequest) (*DoSumResponse, error)
	mustEmbedUnimplementedDoSumServiceServer()
}

// UnimplementedDoSumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoSumServiceServer struct {
}

func (UnimplementedDoSumServiceServer) Sum(context.Context, *DoSumRequest) (*DoSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedDoSumServiceServer) mustEmbedUnimplementedDoSumServiceServer() {}

// UnsafeDoSumServiceServer may be embedded to opt out of forward compatibility for this controller.
// Use of this interface is not recommended, as added methods to DoSumServiceServer will
// result in compilation errors.
type UnsafeDoSumServiceServer interface {
	mustEmbedUnimplementedDoSumServiceServer()
}

func RegisterDoSumServiceServer(s grpc.ServiceRegistrar, srv DoSumServiceServer) {
	s.RegisterService(&DoSumService_ServiceDesc, srv)
}

func _DoSumService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoSumServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.doSumService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoSumServiceServer).Sum(ctx, req.(*DoSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoSumService_ServiceDesc is the grpc.ServiceDesc for DoSumService controller.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoSumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.doSumService",
	HandlerType: (*DoSumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _DoSumService_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greet/greetpb/sum.proto",
}
